平衡二叉树

bool IsBalanced_Solution(TreeNode* pRoot) {
    if(!pRoot)
        return true;
    int d_left = TreeDepth(pRoot->left);
    int d_right = TreeDepth(pRoot->right);
    if(abs(d_left-d_right)<=1)
        return IsBalanced_Solution(pRoot->left) && IsBalanced_Solution(pRoot->right); //注意这个返回
    else
        return false;
}
int TreeDepth(TreeNode* root){
    if(!root)
        return 0;
    return 1+max(TreeDepth(root->left), TreeDepth(root->right));
}

//去除重复遍历
bool IsBalanced_Solution(TreeNode* root) {
    return getDepth(root) != -1;
}
int getDepth(TreeNode* root) {
    if (root == null) 
        return 0;
    int left = getDepth(root->left);
    if (left == -1)
        return -1;
    int right = getDepth(root->right);
    if (right == -1)
        return -1;
    return abs(left - right) > 1 ? -1 : 1 + max(left, right);
}
