字符串的排列
输入一个字符串（长度不超过9(可能有字符重复),字符只包括大小写字母）,按字典序打印出该字符串中字符的所有排列。例如输入字符串abc,则打印出由字符a,b,c所能排列出来的所有字符串abc,acb,bac,bca,cab和cba。

//排列：固定第0位，后位递归排列；依次将0位与后边某一位交换，后位再递归排列
//此为偷懒写法，还有更复杂的写法可以直接无重复，更更复杂的直接是字典序
vector<string> Permutation(string str) {
    vector<string> v;
    PermutationHelper(v, str, 0);
    sort(v.begin(), v.end());
    return v;
}
bool isExist(vector<string> &v, string &s){
    for(int i=0; i<v.size(); i++){
        if(v[i]==s)
            return true;
    }
    return false;
}
void PermutationHelper(vector<string> &v, string &s, int from){ //递归，固定一个位，后面的位交换；这样得到的不是字典序
    if(from==s.size()-1){
        if(!isExist(v, s))
            v.push_back(s);
    }
    else if(from<s.size()-1){
        for(int j=from; j<s.size(); j++){       //j须从from开始而不是from+1。当j=from和from交换，即固定该位，递归变动后面的位
            swap(s[j], s[from]);
            PermutationHelper(v, s, from+1);
            swap(s[j], s[from]);        //将序列from位还原
        }
    }
}

//去重的全排列就是从第一个数字起，每个数分别与“它后面非重复出现”的数字交换
bool IsSwap(char* from, char* to){
    char* p;
    for(p = from; p < to; p++){
        if(*p == *to)
            return false;   
    }   
    return true;
} 
void AllPermutation(char* perm, int from, int to)
{
    if(from > to)
        return; 
    if(from == to) {    //假如要求是打印当前排列 
        static int count = 1;    //局部静态变量，用来统计全排列的个数  
        cout << count++ << ":" << perm;
        cout << endl;
    }
    if(from < to) {    //用递归实现全排列 
        for(int j = from; j <= to; j++)    //第j个字符分别与它后面的字符交换就能得到新的排列
        {
            if(IsSwap((perm + j), (perm + to)))
            {
                swap(perm[j], perm[from]);
                AllPermutation(perm, from + 1, to);
                swap(perm[j], perm[from]);
            }
        }
    }
}

//next_permutation算法，不断生成下一最近字典序的排列，难
bool NextPermutation(char* str){
    assert(str);    //检查空指针
    char *p, *q, *pFind;
    char *pEnd = str + strlen(str) - 1;
    if(str == pEnd)
        return false;
    p = pEnd;
    while(p != str){
        q = p;
        p--;
        if(*p < *q)    //找升序的相邻两数，前一个数即替换数
        {
            //从后向前找比替换点大的第一个数
            pFind = pEnd;
            while(*pFind <= *p) 
                --pFind;
            swap(*p, *pFind);
            //替换点后的数全部反转
            Reverse(q, pEnd);
            return true; 
        } 
    }
    //如果没有找到下一个排列，全部反转后返回false
    Reverse(str, pEnd);   
    return false; 
}
