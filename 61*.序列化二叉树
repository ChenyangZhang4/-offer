序列化二叉树
请实现两个函数，分别用来序列化和反序列化二叉树

//序列化：使用前序遍历，递归的将二叉树的值转化为字符（在每次二叉树的结点不为空时，在转化val所得的字符之后添加一个','作为分割。对于空节点则以'#'代替,因为仅靠先序序列无法创建二叉树)。
//反序列化：按照前序顺序，递归的使用字符串中的字符创建一个二叉树
char* Serialize(TreeNode *root) {
    if(!root)
        return NULL;
    string s="";
    preOrder(root, s);
    char *res=new char[s.length()+1];       //注意+1
    int i=0;
    for(; i<s.length(); i++)
        res[i]=s[i];
    res[i]='\0';
    return res;
}
void preOrder(TreeNode *root, string &s){   //注意&
    if(!root){
        s+='#';                             //注意'#'
        return;                             //注意void的提早结束
    }
    s+=to_string(root->val);
    s+=',';                                 //注意','
    preOrder(root->left, s);
    preOrder(root->right, s);
}
TreeNode* Deserialize(char *str) {
    if(!str)
        return NULL;
    TreeNode *root = preCreator(&str);      //注意&
    return root;
}
TreeNode* preCreator(char **str){           //注意**，*str指向字符，过程中我们要改变指针，所以应该传这个指针的地址（不能像迭代器那样，所以二级指针
    if(**str=='#'){
        ++(*str);                           //注意移动指针
        return NULL;
    }
    int num=0;
    while(**str!='\0' && **str!=','){
        num = num*10 + ((**str) - '0');     //这里面对负值会出错
        ++(*str);
    }
    TreeNode *root=new TreeNode(num);
    if(**str=='\0')
        return root;
    else
        ++(*str);                           //跳到下一字符而不是停在','
    root->left=preCreator(str);
    root->right=preCreator(str);
    return root;
}
