数组中出现次数超过一半的数字
数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。如果不存在则输出0。

int MoreThanHalfNum_Solution(vector<int> numbers) {
    map<int, int> m;
    int k = numbers.size()/2 + 1;
    for(int i=0; i<numbers.size(); i++){
        m[numbers[i]]++;
        if(m[numbers[i]]>=k)
            return numbers[i];
    }
    return 0;
}

//由于次数超过一半的数字比其他数加起来都多，所以当下一个数相同时次数+1，不同时次数-1，减到0时替换为下一个数。这样只需要保存两个数（数，次数）
int MoreThanHalfNum_Solution(vector<int> numbers) {
    if(numbers.empty()) return 0;
    int result = numbers[0];
    int times = 1; // 次数
    for(int i=1;i<numbers.size();++i) {
        if(times == 0) {
            // 更新result的值为当前元素，并置次数为1
            result = numbers[i];
            times = 1;
        }
        else if(numbers[i] == result)
            ++times; // 相同则加1
        else
            --times; // 不同则减1
    }
    times = 0;
    for(int i=0;i<numbers.size();++i) {
        if(numbers[i] == result) ++times;
    }
    return (times > numbers.size()/2) ? result : 0;
}
