和为s的连续正数序列
输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序

//双指针
vector<vector<int> > FindContinuousSequence(int sum) {
	vector<vector<int> > res;
	vector<int> temp;
	int start = 1, end = 2;
	int curSum = 3;
	while (start < end && start <= sum/2) {
		if (curSum < sum) {
			end++;
			curSum += end;
		}
		else if (curSum > sum) {
			curSum -= start;
			start++;
		}
		else {
			temp.clear();
			for (int i = start; i <= end; i++)
				temp.push_back(i);
			res.push_back(temp);
			curSum -= start;
			start++;        //注意这句用来跳出无限循环
		}
	}
	return res;
}

vector<vector<int> > FindContinuousSequence(int sum) {
    vector<vector<int> > res;
    vector<int> v;
    int n = sqrt(sum*2);
    if(n*(n+1)>sum*2)
        n-=1;
    int start = 0;
    while(n>1){
        if(n%2==0){
            if(sum%n==n/2){
                v.clear();
                start = sum/n - n/2 + 1;
                for(int i=0; i<n; i++){
                    v.push_back(start++);
                }
                res.push_back(v);
            }
        }
        else{
            if(sum%n==0){
                v.clear();
                start = sum/n - (n-1)/2;
                for(int i=0; i<n; i++){
                    v.push_back(start++);
                }
                res.push_back(v);
            }
        }
        n--;
    }
    return res;
}

//简化
vector<vector<int> > FindContinuousSequence(int sum) {
    vector<vector<int> > ans;
    for (int n = sqrt(2 * sum); n >= 2; n--) {
        if ((n & 1) == 1 && sum % n == 0 || (sum % n) * 2 == n) {
            vector<int> list;
            for (int j = 0, k = (sum / n) - (n - 1) / 2; j < n; j++, k++) {
                list.push_back(k);
            }
            ans.push_back(list);
        }
    }
    return ans;
}
